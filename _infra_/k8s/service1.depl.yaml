apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-1-depl
spec:
  replicas: 2
  selector:
    matchLabels:
      app: service-1
  template:
      metadata:
        labels:
          app: service-1
      spec:
         containers:
            - name: service-1
              image: romanysefen/k8-learn-service-1:latest
              env:
              # Here we did not use the URL of the ingress because service-1 needs to communicate with service-2 internally within the cluster
              # Using the ingress URL would route the traffic outside the cluster and back in, which is inefficient and can lead to issues
              # Instead, we use the internal service name and port defined in the service-2 service
                - name: SERVICE_2_URL
                  value: "http://service-2-svc:5001"  # Internal service name and port of service-2 defined in service2.depl.yaml, not the ingress URL as it is for external access
---
# ClusterIP Service to expose service-1 within the cluster for local communication
apiVersion: v1
kind: Service
metadata:
  name: service-1-svc
spec:
  type: ClusterIP # Cluster-internal service (default)
  selector:
    app: service-1
  ports:
    - name: service-1-http  
      protocol: TCP
      port: 3000 
      targetPort: 3000 # must match the port defined in the Dockerfile and container specification above
---
# NodePort Service to expose service-1 outside the cluster for testing purposes
apiVersion: v1
kind: Service
metadata:
  name: service-1-nodeport-svc
spec:
  type: NodePort # Exposes the service on each Node's IP at a static port (the NodePort)
  selector:
    app: service-1
  ports:
    - name: service-1-http   
      protocol: TCP
      port: 3000
      targetPort: 3000
